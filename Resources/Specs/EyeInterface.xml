<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "http://www.cs.stolaf.edu/lib/SpecML/SpecML.dtd">
<?xml-stylesheet
   href="http://www.cs.stolaf.edu/lib/SpecML/SpecMLToHTML.xsl"
   type="text/xsl"?>

<spec>
<title>EyeInterface Specification</title>
<header>This class contains the position on the screen where the user is looking, as well as all of the necessary functions for gaze tracking.</header>
<credits>Maxwell Johnson.  May 4th 2015.  Richard Allen.  XML version of specification written by Aubrey Barnard, Wednesday, April 10, 2002</credits>

<class name="EyeInterface" visibility="public">

	
<nosuperclass/>

<variables>
<var name="x" type="public int">x coordinate of gaze position on screen</var>
<var name="y" type="public int">y coordinate of gaze position on screen</var>
<var name="capture" type="public CvCapture *">poiner to the webcam feed</var>
<var name="frame" type="public cv::Mat">matrix used to calculate face position</var>
<var name="counter" type="public int">Used to limit the rate of calculations so as not to slow down the game</var>
<var name="blinkCount" type="public int">Increments each time a blink is detected</var>
</variables>

<constructors-list>

<constructor>
<desc>Default Constructor</desc>
<noarguments />
<statechange>Sets initial values for all variables to default</statechange>
</constructor>


</constructors-list>

<destructor>
<desc>default destructor</desc>
<statechange>Deletes all dynamically allocated memory, and frees the webcam feed</statechange>
</destructor>

<methods-list>

<method name="update" returntype="void">
<desc>Calculates gaze position</desc>
<noarguments />
<statechange>Runs the functions necessary to to calculate gaze position at the appropriate rate.</statechange>
<return>No return value.</return>
</method>

<method name="findEyes" returntype="void">
<desc>Calculates simulated distance to user's face and sets a value to distance accordingly</desc>
<arguments>
<arg name="frame_gray" type="cv::Mat"></arg>
<arg name="face" type="cv::Rect"></arg>
</arguments>
<statechange>Uses the webcam feed, face position and pupil position to mathematically calculate the appropriate values for x and y</statechange>
<return>No return value.</return>
</method>


<method name="detectAndDisplay" returntype="void">
<desc>Finds the face position</desc>
<arguments>
<arg name="frame" type="cv::Mat"></arg>
</arguments>
<statechange>Parses the webcam feed into an image and runs the OpenCV algorithm to detect the face</statechange>
<return>No return value.</return>
</method>

<method name="mouse" returntype="void">
<desc>Turns on mouse controls if webcam is not plugged in</desc>
<arguments>
<arg name="button" type="int"></arg>
<arg name="state" type="int"></arg>
<arg name="x" type="int"></arg>
<arg name="y" type="int"></arg>
</arguments>
<statechange>If webcam is not plugged in, set left click to be a blink</statechange>
<return>No return value.</return>
</method>

<method name="mouse_motion" returntype="void">
<desc>Turns on mouse controls if webcam is not plugged in</desc>
<arguments>
<arg name="x" type="int"></arg>
<arg name="y" type="int"></arg>
</arguments>
<statechange>If webcam is not plugged in, x and y to be mouse x and y</statechange>
<return>No return value.</return>
</method>

</methods-list>

</class>

</spec>
